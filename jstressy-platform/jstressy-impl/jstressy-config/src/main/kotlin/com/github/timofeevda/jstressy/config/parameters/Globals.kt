/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2018 Denis Timofeev <timofeevda@gmail.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 *
 */

package com.github.timofeevda.jstressy.config.parameters

import com.fasterxml.jackson.annotation.JsonPropertyOrder
import com.github.timofeevda.jstressy.api.config.parameters.StressyLoggerSummaryDefinition
import com.github.timofeevda.jstressy.api.config.parameters.StressyGlobals
import com.github.timofeevda.jstressy.api.config.parameters.StressyRenderedMetrics

/**
 * Global Stressy configuration
 *
 * @author timofeevda
 */
@JsonPropertyOrder("host", "port", "stressyMetricsPort", "stressyMetricsPath", "useSsl", "insecureSsl",
    "maxConnections", "maxWebSockets", "maxWebSocketFrameSize", "maxWebSocketMessageSize", "webSocketPerMessageDeflate",
    "webSocketCompressionLevel", "connectionKeepAlive", "logNetworkActivity", "renderedMetrics", "loggerSummary", "yamlSummary")
class Globals() : StressyGlobals {
    constructor(init: Globals.() -> Unit): this() {
        init()
    }

    /**
     * Port of the host being tested
     */
    override var port: Int = 80
    /**
     * Host being tested
     */
    override var host: String = "localhost"
    /**
     * Port which is exposed by Stressy to provide application metrics
     */
    override var stressyMetricsPort: Int? = null
    /**
     * Path in URL which is used by Stressy to provide application metrics
     */
    override var stressyMetricsPath: String? = null
    /**
     * Turns SSL on/off
     */
    override var useSsl = false
    /**
     * Turns insecure SSL on/off
     */
    override var insecureSsl = false
    /**
     * Number of max concurrent connection generated by Stressy
     */
    override var maxConnections = 1000

    /**
     * Max number of websocket connections
     */
    override var maxWebSockets = 1000

    /**
     * Max size of the websocket message frame
     */
    override var maxWebSocketFrameSize = 65536

    /**
     * Max size of the websocket message
     */
    override var maxWebSocketMessageSize = this.maxWebSocketFrameSize * 4

    /**
     * WebSocket per message deflated is turned on
     */
    override var webSocketPerMessageDeflate: Boolean = true
    /**
     * Default ZIP compression level
     */
    override var webSocketCompressionLevel: Int = 6

    /**
     * Turn HTTP client connection pooling on/off
     */
    override var connectionKeepAlive: Boolean = true

    /**
     * Turn network activity logging in HTTP client on/off
     */
    override var logNetworkActivity: Boolean = false

    /**
     * Turn YML config overwrite by DSL generated config
     */
    override var overwriteWithDSLGeneratedConfig: Boolean = false

    override val renderedMetrics: MutableList<StressyRenderedMetrics> = mutableListOf()

    override var loggerSummary : StressyLoggerSummaryDefinition? = null

    override var yamlSummary : YamlSummaryDefinition? = null

    fun renderedMetrics(init: RenderedMetrics.() -> Unit) {
        renderedMetrics.add(RenderedMetrics(init))
    }

    fun loggerSummary(init: StressyLoggerSummaryDefinition.() -> Unit) {
        loggerSummary = LoggerSummaryDefinition(init)
    }

    fun yamlSummary(init: YamlSummaryDefinition.() -> Unit) {
        yamlSummary = YamlSummaryDefinition(init)
    }

    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as Globals

        if (port != other.port) return false
        if (host != other.host) return false
        if (stressyMetricsPort != other.stressyMetricsPort) return false
        if (stressyMetricsPath != other.stressyMetricsPath) return false
        if (useSsl != other.useSsl) return false
        if (insecureSsl != other.insecureSsl) return false
        if (maxConnections != other.maxConnections) return false
        if (maxWebSockets != other.maxWebSockets) return false
        if (maxWebSocketFrameSize != other.maxWebSocketFrameSize) return false
        if (maxWebSocketMessageSize != other.maxWebSocketMessageSize) return false
        if (webSocketPerMessageDeflate != other.webSocketPerMessageDeflate) return false
        if (webSocketCompressionLevel != other.webSocketCompressionLevel) return false
        if (connectionKeepAlive != other.connectionKeepAlive) return false
        if (logNetworkActivity != other.logNetworkActivity) return false
        if (overwriteWithDSLGeneratedConfig != other.overwriteWithDSLGeneratedConfig) return false
        if (renderedMetrics != other.renderedMetrics) return false
        if (loggerSummary != other.loggerSummary) return false
        if (yamlSummary != other.yamlSummary) return false

        return true
    }

    override fun hashCode(): Int {
        var result = port
        result = 31 * result + host.hashCode()
        result = 31 * result + (stressyMetricsPort ?: 0)
        result = 31 * result + (stressyMetricsPath?.hashCode() ?: 0)
        result = 31 * result + useSsl.hashCode()
        result = 31 * result + insecureSsl.hashCode()
        result = 31 * result + maxConnections
        result = 31 * result + maxWebSockets
        result = 31 * result + maxWebSocketFrameSize
        result = 31 * result + maxWebSocketMessageSize
        result = 31 * result + webSocketPerMessageDeflate.hashCode()
        result = 31 * result + webSocketCompressionLevel
        result = 31 * result + connectionKeepAlive.hashCode()
        result = 31 * result + logNetworkActivity.hashCode()
        result = 31 * result + overwriteWithDSLGeneratedConfig.hashCode()
        result = 31 * result + renderedMetrics.hashCode()
        result = 31 * result + (loggerSummary?.hashCode() ?: 0)
        result = 31 * result + (yamlSummary?.hashCode() ?: 0)
        return result
    }


}
